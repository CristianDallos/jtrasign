/*
 * TrabajoPIDView.java
 */

package trabajopid;

import java.awt.Dialog;
import java.awt.Image;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class TrabajoPIDView extends FrameView {

    private BufferedImage imagenOriginal;
    private BufferedImage imagenTratada;

    public TrabajoPIDView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = TrabajoPIDApp.getApplication().getMainFrame();
            aboutBox = new TrabajoPIDAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        TrabajoPIDApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        file = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbOriginal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btTratar = new javax.swing.JButton();
        slRed = new javax.swing.JSlider();
        slGreen = new javax.swing.JSlider();
        slBlue = new javax.swing.JSlider();
        lbRed = new javax.swing.JLabel();
        lbGreen = new javax.swing.JLabel();
        lbBlue = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbSelColor = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spUmbralMin = new javax.swing.JSpinner();
        spUmbralMax = new javax.swing.JSpinner();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        Abrir = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        Algoritmos = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jFileChooser1 = new javax.swing.JFileChooser();

        mainPanel.setName("mainPanel"); // NOI18N

        file.setEditable(false);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(trabajopid.TrabajoPIDApp.class).getContext().getResourceMap(TrabajoPIDView.class);
        file.setText(resourceMap.getString("file.text")); // NOI18N
        file.setName("file"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        lbOriginal.setText(resourceMap.getString("lbOriginal.text")); // NOI18N
        lbOriginal.setDoubleBuffered(true);
        lbOriginal.setMaximumSize(new java.awt.Dimension(200, 200));
        lbOriginal.setName("lbOriginal"); // NOI18N
        lbOriginal.setPreferredSize(new java.awt.Dimension(200, 200));
        jScrollPane1.setViewportView(lbOriginal);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        btTratar.setText(resourceMap.getString("btTratar.text")); // NOI18N
        btTratar.setName("btTratar"); // NOI18N
        btTratar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTratarActionPerformed(evt);
            }
        });

        slRed.setValue(33);
        slRed.setName("slRed"); // NOI18N
        slRed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slRedStateChanged(evt);
            }
        });

        slGreen.setValue(33);
        slGreen.setName("slGreen"); // NOI18N
        slGreen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slGreenStateChanged(evt);
            }
        });

        slBlue.setValue(33);
        slBlue.setName("slBlue"); // NOI18N
        slBlue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slBlueStateChanged(evt);
            }
        });

        lbRed.setText(resourceMap.getString("lbRed.text")); // NOI18N
        lbRed.setName("lbRed"); // NOI18N

        lbGreen.setText(resourceMap.getString("lbGreen.text")); // NOI18N
        lbGreen.setName("lbGreen"); // NOI18N

        lbBlue.setText(resourceMap.getString("lbBlue.text")); // NOI18N
        lbBlue.setName("lbBlue"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        cbSelColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ninguno", "Rojo", "Verde", "Azul" }));
        cbSelColor.setName("cbSelColor"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        spUmbralMin.setName("spUmbralMin"); // NOI18N

        spUmbralMax.setName("spUmbralMax"); // NOI18N
        spUmbralMax.setValue(255);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(file, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btTratar)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(slRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbRed)
                                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cbSelColor, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(slGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbGreen)
                                    .addComponent(jLabel4)
                                    .addComponent(spUmbralMin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(slBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbBlue)
                                    .addComponent(jLabel5)
                                    .addComponent(spUmbralMax, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(slRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(slGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(slBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbRed)
                    .addComponent(lbGreen)
                    .addComponent(lbBlue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSelColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spUmbralMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spUmbralMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btTratar)
                .addContainerGap())
        );

        btTratar.getAccessibleContext().setAccessibleName(resourceMap.getString("jButton1.AccessibleContext.accessibleName")); // NOI18N

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        Abrir.setText(resourceMap.getString("Abrir.text")); // NOI18N
        Abrir.setName("Abrir"); // NOI18N
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        fileMenu.add(Abrir);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(trabajopid.TrabajoPIDApp.class).getContext().getActionMap(TrabajoPIDView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        Algoritmos.setLabel(resourceMap.getString("menuAlg.label")); // NOI18N
        Algoritmos.setName("menuAlg"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("miImagenNorm.text")); // NOI18N
        jMenuItem1.setName("miImagenNorm"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Algoritmos.add(jMenuItem1);

        menuBar.add(Algoritmos);
        Algoritmos.getAccessibleContext().setAccessibleName(resourceMap.getString("Algoritmos.AccessibleContext.accessibleName")); // NOI18N

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 469, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        jFileChooser1.setName("jFileChooser1"); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

private void btTratarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTratarActionPerformed
    statusMessageLabel.setText("Tratando imagen...");
    tratar();
    
    statusMessageLabel.setText("");
    Dialog dimagen = new ImageDialog((Image) imagenTratada, this.getFrame(), false);
    dimagen.setTitle("Imagen tratada");
    dimagen.show();
}//GEN-LAST:event_btTratarActionPerformed

private void slRedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slRedStateChanged
    lbRed.setText("Rojo: " + slRed.getValue() + "%");
}//GEN-LAST:event_slRedStateChanged

private void slGreenStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slGreenStateChanged
    lbGreen.setText("Verde: " + slGreen.getValue() + "%");
}//GEN-LAST:event_slGreenStateChanged

private void slBlueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slBlueStateChanged
    lbBlue.setText("Azul: " + slBlue.getValue() + "%");
}//GEN-LAST:event_slBlueStateChanged

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    List<Image> imagenes = imagenes_norm(imagenOriginal);
    String titulos[] = new String[]{"Red", "Green", "Blue", "Yellow", "RG_BY"};
    int i = 0;
    Iterator<Image> it = imagenes.iterator();
    while(it.hasNext()){
        Dialog dialog = new ImageDialog(it.next(), this.getFrame(), false);
        dialog.setTitle(titulos[i]);
        i++;
        dialog.show();
    }
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {                                      
            File fichero;
            jFileChooser1.showOpenDialog(this.getComponent());

            fichero = jFileChooser1.getSelectedFile();
            this.file.setText(fichero.getAbsolutePath());
           
            try {
                imagenOriginal = ImageIO.read(fichero);
                ImageIcon imagen = new ImageIcon(
                    imagenOriginal.getScaledInstance(jScrollPane1.getWidth(), 
                            jScrollPane1.getHeight(), Image.SCALE_DEFAULT));
                lbOriginal.setIcon(imagen);
            } catch (IOException ex) {
                Logger.getLogger(TrabajoPIDView.class.getName()).log(Level.SEVERE, null, ex);
            }
}


private List<Image> imagenes_norm(BufferedImage bi){
    List<Image> result = new LinkedList<Image>();
    
    int maxX = bi.getWidth();
    int maxY = bi.getHeight();
    
    BufferedImage r = new BufferedImage(maxX, maxY, BufferedImage.TYPE_BYTE_GRAY);
    WritableRaster rasterR = r.getRaster();
    BufferedImage g = new BufferedImage(maxX, maxY, BufferedImage.TYPE_BYTE_GRAY);
    WritableRaster rasterG = g.getRaster();
    BufferedImage b = new BufferedImage(maxX, maxY, BufferedImage.TYPE_BYTE_GRAY);
    WritableRaster rasterB = b.getRaster();
    BufferedImage ye = new BufferedImage(maxX, maxY, BufferedImage.TYPE_BYTE_GRAY);
    WritableRaster rasterY = ye.getRaster();
    BufferedImage rg_by = new BufferedImage(maxX, maxY, BufferedImage.TYPE_BYTE_GRAY);
    WritableRaster rasterRg_by = ye.getRaster();
    
    Raster rasterO = bi.getData();
    
    maxX = rasterO.getHeight();
    maxY = rasterO.getWidth();
    
     for(int x = rasterO.getMinX(); x < maxX; x++){
        for(int y = rasterO.getMinY(); y < maxY; y++){
            int pixel[] = null;
            pixel = rasterO.getPixel(y , x, pixel);
            
            int red = pixel[0];
            int green = pixel[1];
            int blue = pixel[2];
            
            int nRed = red - ((green + blue) / 2);
            if(nRed <= 0)
                nRed = 0;
            
            int nGreen = green - ((red + blue) / 2);
            if(nGreen <= 0)
                nGreen = 0;
            
            int nBlue = blue - ((red + green) / 2);
            if(nBlue <= 0)
                nBlue = 0;
            
            int nYellow = ((red + green) / 2) - blue - (Math.abs(red - green)/2);
            if(nYellow <= 0)
                nYellow = 0;
            
            int pRg_by = Math.abs(Math.abs(nRed - nGreen) - Math.abs(nBlue - nYellow));
            
            rasterR.setPixel(y, x, new int[]{nRed});
            rasterG.setPixel(y, x, new int[]{nGreen});
            rasterB.setPixel(y, x, new int[]{nBlue});
            rasterY.setPixel(y, x, new int[]{nYellow});
            rasterRg_by.setPixel(y, x, new int[]{pRg_by});
        }
     }
    
    result.add((Image) r);
    result.add((Image) g);
    result.add((Image) b);
    result.add((Image) ye);
    result.add((Image) rg_by);
    
    return result;
}

private void tratar(){
    float nred = slRed.getValue() / 100.0f;
    float ngreen = slGreen.getValue() / 100.0f;
    float nblue = slBlue.getValue() / 100.0f;
    int maxX = imagenOriginal.getWidth();
    int maxY = imagenOriginal.getHeight();
    
    ColorModel colorO = imagenOriginal.getColorModel();
    
    System.out.println("ColorModel: " + colorO.toString());
    imagenTratada = new BufferedImage(maxX, maxY, BufferedImage.TYPE_BYTE_GRAY);
    WritableRaster rasterW = imagenTratada.getRaster();
   
    Raster rasterO = imagenOriginal.getData();
    
    maxX = rasterO.getHeight();
    maxY = rasterO.getWidth();
    
    for(int x = rasterO.getMinX(); x < maxX; x++){
        for(int y = rasterO.getMinY(); y < maxY; y++){
            int pixel[] = null;
            pixel = rasterO.getPixel(y , x, pixel);
            
            int red = pixel[0];
            int green = pixel[1];
            int blue = pixel[2];
            
            String sel = (String) cbSelColor.getSelectedItem();
            if(!sel.equalsIgnoreCase("Ninguno")){
                if(sel.equalsIgnoreCase("Rojo")){
                    if(red < (Integer)spUmbralMin.getValue() 
                            || red > (Integer)spUmbralMax.getValue())
                        red = 0;
                }else if(sel.equalsIgnoreCase(("Verde"))){
                     if(green < (Integer)spUmbralMin.getValue() 
                            || green > (Integer)spUmbralMax.getValue())
                        green = 0;
                }else if(sel.equalsIgnoreCase("Azul")){
                    if(blue < (Integer)spUmbralMin.getValue() 
                            || blue > (Integer)spUmbralMax.getValue())
                        blue = 0;
                }
            }
            
            int pixel_gris = (int) (Math.floor(red * nred) + Math.floor(green * ngreen) 
                    + Math.floor(blue * nblue));
            pixel[0] = 255 - pixel_gris;
            //pixel[1] = pixel_gris;
            //pixel[2] = pixel_gris;
            /*
            System.out.println( "[" + y + "," + x + "] Rojo: " + red
                    + ", Verde: " + green + ", Azul: " + blue);
            */
            rasterW.setPixel(y, x, pixel);
        }
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Abrir;
    private javax.swing.JMenu Algoritmos;
    private javax.swing.JButton btTratar;
    private javax.swing.JComboBox cbSelColor;
    private javax.swing.JTextField file;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbBlue;
    private javax.swing.JLabel lbGreen;
    private javax.swing.JLabel lbOriginal;
    private javax.swing.JLabel lbRed;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JSlider slBlue;
    private javax.swing.JSlider slGreen;
    private javax.swing.JSlider slRed;
    private javax.swing.JSpinner spUmbralMax;
    private javax.swing.JSpinner spUmbralMin;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
